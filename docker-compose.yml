services:
  # PostgreSQL database
  db:
    image: postgres:15
    container_name: streamline-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-streamline_scheduler}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pg-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: streamline-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@streamline.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-your-super-secret-pgadmin-password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Rust backend
  backend:
    build:
      context: ./backend_new
      dockerfile: Dockerfile
    container_name: streamline-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/${POSTGRES_DB:-streamline_scheduler}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS:-24}
      PORT: 3001
      RUST_LOG: ${RUST_LOG:-info}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # Frontend service (SvelteKit)
  frontend:
    build:
      context: ./frontend_new
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL:-http://localhost:3001}
    container_name: streamline-frontend
    restart: unless-stopped
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://backend:3001}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # Nginx reverse proxy for HTTPS (optional)
  nginx:
    image: nginx:alpine
    container_name: streamline-nginx
    restart: unless-stopped
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - production

volumes:
  pg-db-data:
  pgadmin-data:

networks:
  app-network:
    driver: bridge